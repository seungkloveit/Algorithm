package AlgorithmPkg;
import java.util.LinkedList; // LinkedList 사용 

// 해시테이블 클래스 선언 
class HashTable { 
	class Node { // 해시테이블에 저장할 데이터를 노드에 저장. Node 클래스 생성
		String key;
		String value;
		
		public Node(String key, String value) { // Node클래스의 생성자 
			this.key = key;
			this.value = value;
		}
		String value(){
			return value;
		}
		void value(String value) {
			this.value = value;
		}
	}
	
	LinkedList<Node>[] data; // 데이터를 저장할 LinkedList 배열 선언 . 위에서 선언한 노드가 들어감 
	
	HashTable(int size){
		this.data = new LinkedList[size]; // 해시테이블 만드는 순간 해시테이블을 얼마나 크기로 만들지 미리 정해서 배열방을 만듦 
	}
	
	// 해시 알고리즘을 가지고 있는 해시함수. 키를 받아서 해시코드 변환 
	int getHashCode(String key) { 
		int hashcode = 0; // 해시코드 0으로 반환 
		for(char c:key.toCharArray()) { 
			hashcode+=c; // 입력받은 키 문자열을 for문을 돌면서 각 레터의 ASCII값을 가져와서 해시코드에 더해줌 
		}
	return hashcode;
	}
	
	// 해시코드를 받아와서 배열방에 인덱스로 변환해주는 함수 
	int convertToIndex(int hashcode) {
		return hashcode % data.length; // 해시코드를 배열방의 크기로 나눈 나머지가 배열의 인덱스가 된다. 
	}
	
	// 인덱스로 배열방 찾은 이후에 배열방 노드가 여러개 있으면 검색키(searchKey)로 해당 노드 찾는 함수 
	Node searchKey(LinkedList<Node>list,String key) {
		if(list==null) return null; // 배열방이 null이라면 null 반환 
		for(Node node:list) { 
			if(node.key.equals(key)) {
				return node;
			} // 향상된 for문을 이용하여 LinkedList를 돌면서 노드의 키가 검색하는 키와 같은지 확인해서 같으면 노드 반환 
		}
	

		return null; // 같은 데이터를 찾지 못하면 null 반환 

	}

	// 본격적으로 데이터를 받아와서 저장하는 put 함수. 인자(파라미터)로 저장할 key와 value를 받는다. 
	void put(String key,String value) { 
		int hashcode = getHashCode(key); // key를 가지고 hashcode 가져옴 
		int index = convertToIndex(hashcode); // 받아온 hashcode로 배열방 번호 받아옴 
		LinkedList<Node>list = data[index]; // 배열방 번호로 기존 배열방에 있는 데이터 가져옴 
		
		
		// 배열방이 null이면 LinkedList 생성 
		if(list==null) {
			list = new LinkedList<Node>();
			data[index] = list; // 해당 리스트를 배열방에 넣어준다. 
		}
	
	
	// 배열방에 혹시 기존에 해당 키로 데이터를 가지고 있는지 Node를 받아온다. 
	Node node = searchKey(list,key);
	if(node==null) { // node가 null이면 데이터가 없으니 받아온 정보를 가지고 노드 객체를 생성해서 리스트 추가. 
		list.addLast(new Node(key,value));
	} else {
		node.value(value); // node가 null이 아니면 해당 노드의 값을 대체해 주는 것으로 중복키 처리. 
	}
}

	// key를 가지고 데이터를 가져오는 get 함수 정의 
	String get(String key) {
		int hashcode = getHashCode(key); // key를 가지고 해시코드 가져옴 
		int index = convertToIndex(hashcode); // 받아온 해시코드로 인덱스를 받아온다. 
		System.out.println(key+",hashcode("+hashcode+"),index("+index+")"); // 나중에 실행결과 출력 시 어떤 배열방에 무슨 데이터가 있는지 확인용 
		LinkedList<Node>list = data[index]; // 인덱스에서 LinkedList를 가져온다. 
		Node node = searchKey(list,key); // LinkedList에서 해당 키를 가지는 것을 검색하고 노드에 저장 
		return node==null?"Not Found":node.value(); // 노드 못찾으면 not found를 출력하고, 노드를 찾으면 찾은 value 반환 
		
	}
	}
	
	public class Test { 
		public static void main (String[] args) {
			HashTable h = new HashTable(3); // 해시 테이블의 개수는 3개로 고정 
			h.put("sung", "she is pretty");
			h.put("jin", "she is a model");
			h.put("hee", "she is a angel");
			h.put("min", "she is cute");
			System.out.println(h.get("sung"));
			System.out.println(h.get("jin"));
			System.out.println(h.get("hee"));
			System.out.println(h.get("min"));
		}
	}
	
